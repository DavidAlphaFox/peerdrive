
== Introduction ==

Hotchpotch tries to solve various problems which are common to every day file
management but which are poorly supported by traditional hierarchical file
systems. In particular these are:

  - Replication and synchronization
  - Seamless backup integration
  - File versioning
  - Arbitrary, non-hierarchical file organization
  - Rich meta data

These problems are tackled by three main concepts in Hotchpotch...

=== Split identity and organization ===

In traditional hierarchical file systems a file is identified by its path.
Normally this means that if two paths differ then they identify two different
files (excluding sym-/hard links at this point). The problem with this scheme
is that it not only gives the file its identity but it also represents the
users classification/organization of the file. If the user moves the file to
another folder (to change the classification) he will also implicitly change
the identity of the file. Usually the user observes the effect of the changed
identity by broken symbolic links or non-working "Recent files" entries in
applications.

Even though these effects can be mitigated by good user interfaces and
additional software layers they are not solvable on the file system level.
Furthermore only strict categorization schemes are supported as organizing
principle. A file can only live in one category (folder) at the same time. Hard
links can overcome this situation but they only work on the same volume and are
rarely used. Symlinks are used but break as soon as the original file is moved.

In Hotchpotch every document (file) is identified by a 128 bit random unique id
(UUID). Any document can "point" to another document by it's UUID, even across
volume boundaries. This allows for arbitrary organization schemes via
"container" documents. The documents can be moved even between volumes without
breaking the links between them.

The same UUID may also exist on more than one store simultaneously. This is no
error and is a common state when documents are replicated between different
volumes. In conjunction with versioning Hotchpotch is later able to synchronize
the replicas on the different volumes.


=== Document versioning ===

The content of each document is stored as a series of immutable revisions as
opposed to a mutable byte stream in traditional file systems. For this scheme
each store maintains a mapping of UUIDs to the latest revision of the document
where each revision is identified by the hash of its content. This is the same
scheme as git is using to track changes to the repository.

As a document can exist is more than one volume simultaneously it's history
may not be linear and can contain forks. See the following "picture" for an
illustration on what happens when a document is replicated and changed
independently on the different volumes.

                          D(1)---F(1)   <-- UUID (Volume 1)
                         /
        A(12)---B(12)---C(12)
                         \
                          E(2)---G(2)   <-- UUID (Volume 2)

If the user chooses to synchronize the two versions of the same document
Hotchpotch is able to find the common ancestor and merge the independent
changes into one version automatically. After the merge the document exists on
both stores with the same revision and the same history.

                             D(12)---F(12)
                            /             \         /- UUID (Volume 1)
        A(12)---B(12)---C(12)              H(12) <-|
                            \             /         \- UUID (Volume 2)
                             E(12)---G(12)

Another big advantage for the user is that he is always able to access previous
revisions of the document. As long as old revisions are not purged the user
does not need to care about overwriting the document and loosing important
data.

Additionally this allows for a seamless integration of backups. Old revisions
which are not needed anymore may be moved to a backup volume. If such a old
revision is needed again only the backup volume needs to be mounted. Therefore
normal document handling and backup are seamlessly integrated in Hotchpotch.

=== Rich meta data ===


== Additional concepts ==

- sticky documents
- preliminary revisions

