#!/usr/bin/env escript

main([]) ->
	case file:consult("rebar.config.in") of
		{ok, Config} ->
			NewConfig = configure(Config, []),
			{ok, File} = file:open("rebar.config", [write]),
			try
				lists:foreach(
					fun(Line) ->
						ok = file:write(File, io_lib:print(Line)),
						ok = file:write(File, ".\n\n")
					end,
					NewConfig)
			after
				file:close(File)
			end,
			io:format("Done. Type 'rebar compile' to compile...~n");

		{error, Reason} ->
			io:format("Cannot read rebar.config.in: ~p~n", [Reason]),
			halt(2)
	end;

main(_) ->
	usage().

usage() ->
	io:format("Usage: configure~n"),
	halt(1).


configure([], Acc) ->
	lists:reverse(Acc);

configure([{erl_opts, Options} | Rest], Acc) ->
	io:format("Checking for fuserl: "),
	Opt1 = case has_app("fuserl-") of
		true  -> io:format("enabled~n"), [{d, have_fuserl} | Options];
		false -> io:format("disabled~n"), Options
	end,
	io:format("Checking for erldokan: "),
	Opt2 = case has_app("erldokan-") of
		true  -> io:format("enabled~n"), [{d, have_dokan} | Opt1];
		false -> io:format("disabled~n"), Opt1
	end,
	configure(Rest, [{erl_opts, Opt2} | Acc]);

configure([Directive | Rest], Acc) ->
	configure(Rest, [Directive | Acc]).


has_app(AppRegex) ->
	case re:run(get_apps(), AppRegex, [{capture, none}]) of
		match ->
			true;
		nomatch ->
			false
	end.

get_apps() ->
	lists:foldl(
		fun(Path, Acc) ->
			case lists:reverse(filename:split(Path)) of
				["ebin", Lib | _] ->
					Lib ++ ":" ++ Acc;
				_ ->
					Acc
			end
		end,
		"",
		code:get_path()).

